"""
Django settings for tokencredit project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

import environ
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False),
    JAWSDB_MARIA_URL=(str, False),
    APP_ENV=(str, False),
    MAINTENANCE_MODE=(bool, False),
    MAIL_ENCRYPTION=(bool, False)
)
# reading .env file
environ.Env.read_env()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env(
    'APP_KEY', default='54aueh@ue3xt3ztgis54@9a(+mre$dtd#a0j4t#!^8v+q8v#2g')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG', default=False)

APP_ENV = env('APP_ENV', default='production')

# Application name
APP_NAME = env('APP_NAME', default='Token Credit')
APP_IDENTIFIER = APP_NAME.lower().replace(" ", "_")

SITE_URL = env('SITE_URL', default="https://tokencredit.com/")

ALLOWED_HOSTS = [
    'localhost',
    'tokencredit.my',
    '127.0.0.1',
    '::1'
]


# Application definition

INSTALLED_APPS = [

    # Core
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',

    # Externals apps
    'rest_framework',
    'storages',

    # Internal apps
    'core',
    'support',
    'api',
    'loan',
]

if APP_ENV == 'local':
    INSTALLED_APPS.append('minio_storage')

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'tokencredit.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'tokencredit.root_context.root_context'
            ],
        },
    },
]

WSGI_APPLICATION = 'tokencredit.wsgi.application'

MAINTENANCE_MODE = env('MAINTENANCE_MODE', default=False)

BACKEND_PATH = 'backoffice'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': env.db('JAWSDB_MARIA_URL') if env('JAWSDB_MARIA_URL', default=False) else {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': env('DB_DATABASE'),
        'USER': env('DB_USERNAME'),
        'PASSWORD': env('DB_PASSWORD'),
        'HOST': env('DB_HOST'),
        'PORT': env('DB_PORT', default=3306),
    }
}

# CACHE
if env('CACHE_DRIVER', default=None) == 'redis':
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": env('REDIS_HOST'),
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                # "PASSWORD": env('REDIS_PASSWORD', None)
            },
            "KEY_PREFIX": APP_IDENTIFIER
        }
    }
    # else use default

# Session
session_driver = env(
    'SESSION_DRIVER',
    default='django.contrib.sessions.backends.db'
)

SESSION_ENGINE = "django.contrib.sessions.backends.cache" if session_driver == "cache" else session_driver
SESSION_CACHE_ALIAS = "default"

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.MD5PasswordHasher',
]


AUTH_USER_MODEL = 'core.User'


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Lagos'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# STATIC_URL = '/static/'

use_aws = env('USE_AWS', default=True)
STATIC_URL = '/public/'
STATIC_ROOT = 'staticfiles'

# else use default setting
if use_aws:
    AWS_DEFAULT_REGION = env('AWS_DEFAULT_REGION')

    if APP_ENV == 'local':
        # FOR MAILS AND OTHERS
        AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')

        MINIO_STORAGE_ACCESS_KEY = env('AWS_ACCESS_KEY_ID')
        MINIO_STORAGE_SECRET_KEY = env('AWS_SECRET_ACCESS_KEY')
        MINIO_STORAGE_MEDIA_BUCKET_NAME = env('AWS_BUCKET')
        MINIO_STORAGE_STATIC_BUCKET_NAME = env('AWS_BUCKET')

        MINIO_STORAGE_ENDPOINT = env('MINIO_URL', default='')
        MINIO_STORAGE_REGION_NAME = env('AWS_DEFAULT_REGION')
        MINIO_STORAGE_LOCATION = ''

        AWS_DEFAULT_ACL = None

        MINIO_STORAGE_STATIC_URL = env(
            'AWS_URL') + "/" + MINIO_STORAGE_LOCATION + '/'
        MINIO_STORAGE_MEDIA_URL = env(
            'AWS_URL') + "/"

        MINIO_STORAGE_USE_HTTPS = True

        # STATICFILES_STORAGE = 'minio_storage.storage.MinioStaticStorage'
        DEFAULT_FILE_STORAGE = 'minio_storage.storage.MinioMediaStorage'

    else:
        AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
        AWS_STORAGE_BUCKET_NAME = env('AWS_BUCKET')
        AWS_QUERYSTRING_AUTH = False

        AWS_S3_ENDPOINT_URL = env('AWS_URL')
        AWS_S3_REGION_NAME = env('AWS_DEFAULT_REGION')
        AWS_S3_OBJECT_PARAMETERS = {
            'CacheControl': 'max-age=86400',
        }
        AWS_LOCATION = ''

        AWS_DEFAULT_ACL = None

        STATIC_URL = env('AWS_URL') + AWS_LOCATION + '/'
        # STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
        DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

        AWS_PRIVATE_BUCKET = env('AWS_PRIVATE_BUCKET', default=None)
        AWS_PRIVATE_BUCKET_URL = env('AWS_PRIVATE_BUCKET_URL', default=None)

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'public'),
]

# Email
EMAIL_BACKEND = env('MAIL_DRIVER', default=None)
EMAIL_HOST = env('MAIL_HOST', default=None)
EMAIL_PORT = env('MAIL_PORT', default=None)
EMAIL_HOST_USER = env('MAIL_USERNAME', default=False)
EMAIL_HOST_PASSWORD = env('MAIL_PASSWORD', default=False)
EMAIL_USE_TLS = env('MAIL_ENCRYPTION', default=False)
DEFAULT_FROM_EMAIL = 'tokencredit <noreply@tokencredit.com.ng>'
SERVER_EMAIL = 'noreply@tokencredit.com.ng'
ADMINS = [
    ('Temitayo', 'brandnaware@outlook.com'),
    ('tokencredit', 'info@tokencredit.com.ng'),
]

EMAIL_SUBJECT_PREFIX = '[tokencredit] - '
# EMAIL_BASE_LAYOUT = 'web/email/layout.html'


# CSRF NAME: Prefer the Laravel Style
CSRF_HEADER_NAME = "HTTP_X_CSRF_TOKEN"


LOGIN_URL = '/auth/'


info_handler = {
    'handlers': ['file'],
    'level': 'INFO',
    'propagate': True,
}


error_handler = {
    'handlers': ['file_error'],
    'level': 'ERROR',
    'propagate': True,
}


debug_handler = {
    'handlers': ['file_debug'],
    'level': 'INFO',
    'propagate': True,
}


def get_file_logger(level: str, filename: str = None) -> dict:
    return {
        'level': level,
        'class': 'logging.FileHandler',
        'formatter': 'verbose',
        'filename': os.path.join(BASE_DIR, 'storage/logs/', (filename if filename else level.lower()) + '.log'),
    }


# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "{levelname} {asctime} {process:d} {message}",
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'file': get_file_logger('INFO', 'application'),
        'file_error': get_file_logger('ERROR'),
        'file_debug': get_file_logger('DEBUG'),

        # You can look at this to setup slack logs
        # useful in the future
        # Also look at how to write handlers and filters
        # 'mail_admins': {
        #     'level': 'ERROR',
        #     'class': 'django.utils.log.AdminEmailHandler',
        #     'filters': ['special']
        # }
    },

    'loggers': {
        'django': info_handler,
        APP_IDENTIFIER: info_handler,
        f"{APP_IDENTIFIER}.error": error_handler,
        f"{APP_IDENTIFIER}.exception": error_handler,
        f"{APP_IDENTIFIER}.debug": debug_handler,
    },
}

# Paystack stuffs
PAYSTACK_PUBLIC_KEY = env('PAYSTACK_PUBLIC_KEY', default=None)
PAYSTACK_SECRET_KEY = env('PAYSTACK_SECRET_KEY', default=None)
PAYSTACK_WEBHOOK_IPS = [
    '52.31.139.75',
    '52.49.173.169',
    '52.214.14.220',
]
PAYSTACK_API_ENDPOINT = 'https://api.paystack.co'


# For django rest framework
USE_DJANGO_REST_FRAMEWORK = True

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}
